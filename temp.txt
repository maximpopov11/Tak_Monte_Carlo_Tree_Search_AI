White won 50.0 out of 108.0 games
WW (0, 2, 0) won 3.0 out of 4.0 games
   0    1    2    3    4
0| WT | WT | WW |    |    |
1|    |    |    |    |    |
2|    | WT |    |    | BW |
3| BT |    | WC |    | BC |
4|    |    |    | BT | BW |

[0,0]: deque([WT])
[0,1]: deque([WT])
[0,2]: deque([WW])
[2,1]: deque([WT])
[2,4]: deque([BW])
[3,0]: deque([BT])
[3,2]: deque([WC])
[3,4]: deque([BC])
[4,3]: deque([BT])
[4,4]: deque([BW])

Black won 43.0 out of 105.0 games
Stack at [4, 4, 0], Direction.LEFT, Order: [1] won 13.0 out of 22.0 games
   0    1    2    3    4
0| WT | WT | WW |    |    |
1|    |    |    |    |    |
2|    | WT |    |    | BW |
3| BT |    | WC |    | BC |
4|    |    |    | BW |    |

[0,0]: deque([WT])
[0,1]: deque([WT])
[0,2]: deque([WW])
[2,1]: deque([WT])
[2,4]: deque([BW])
[3,0]: deque([BT])
[3,2]: deque([WC])
[3,4]: deque([BC])
[4,3]: deque([BT, BW])

Traceback (most recent call last):
  File "c:\Users\jfrie\Tak_Monte_Carlo_Tree_Search_AI\MCTS.py", line 162, in <module>
    main()
  File "c:\Users\jfrie\Tak_Monte_Carlo_Tree_Search_AI\MCTS.py", line 146, in main
    white_next = white_root.best_action()
  File "c:\Users\jfrie\Tak_Monte_Carlo_Tree_Search_AI\MCTS.py", line 113, in best_action
    v = self._tree_policy(board)
  File "c:\Users\jfrie\Tak_Monte_Carlo_Tree_Search_AI\MCTS.py", line 99, in _tree_policy
    return current_node.expand(board)
  File "c:\Users\jfrie\Tak_Monte_Carlo_Tree_Search_AI\MCTS.py", line 38, in expand
    next_state = result(board,action)
  File "c:\Users\jfrie\Tak_Monte_Carlo_Tree_Search_AI\Tak.py", line 205, in result
    piece = initial_space.pop()
IndexError: pop from an empty deque


Simulating: Stack at [1, 2, 1], Direction.RIGHT, Order: [2]
   0    1    2    3    4
0| BT | WW | BC | BW |    |
1| WW | BW |    | WT | BW |
2| BW | BW | BW | BT | BT |
3|    | WC | WW | WW | WW |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT, BW])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,3]: deque([WT, WT])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT])
[2,4]: deque([WT, BT, BT])
[3,1]: deque([WT, WC])
[3,2]: deque([WW])
[3,3]: deque([WT, BT, WW])
[3,4]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: BT (0, 4, 0)
   0    1    2    3    4
0| BT | WW | BC | BW | BT |
1| WW | BW |    | WT | BW |
2| BW | BW | BW | BT | BT |
3|    | WC | WW | WW | WW |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,3]: deque([WT, WT])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT])
[2,4]: deque([WT, BT, BT])
[3,1]: deque([WT, WC])
[3,2]: deque([WW])
[3,3]: deque([WT, BT, WW])
[3,4]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: Stack at [3, 3, 2], Direction.UP, Order: [3]
   0    1    2    3    4
0| BT | WW | BC | BW | BT |
1| WW | BW |    | WT | BW |
2| BW | BW | BW | WW | BT |
3|    | WC | WW |    | WW |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,3]: deque([WT, WT])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, WW])
[2,4]: deque([WT, BT, BT])
[3,1]: deque([WT, WC])
[3,2]: deque([WW])
[3,4]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: BT (1, 2, 0)
   0    1    2    3    4
0| BT | WW | BC | BW | BT |
1| WW | BW | BT | WT | BW |
2| BW | BW | BW | WW | BT |
3|    | WC | WW |    | WW |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BT])
[1,3]: deque([WT, WT])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, WW])
[2,4]: deque([WT, BT, BT])
[3,1]: deque([WT, WC])
[3,2]: deque([WW])
[3,4]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: Stack at [2, 3, 3], Direction.UP, Order: [2]
   0    1    2    3    4
0| BT | WW | BC | BW | BT |
1| WW | BW | BT | WW | BW |
2| BW | BW | BW | WT | BT |
3|    | WC | WW |    | WW |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BT])
[1,3]: deque([WT, WT, BT, WW])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT])
[2,4]: deque([WT, BT, BT])
[3,1]: deque([WT, WC])
[3,2]: deque([WW])
[3,4]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: BW (3, 0, 0)
   0    1    2    3    4
0| BT | WW | BC | BW | BT |
1| WW | BW | BT | WW | BW |
2| BW | BW | BW | WT | BT |
3| BW | WC | WW |    | WW |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BT])
[1,3]: deque([WT, WT, BT, WW])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT])
[2,4]: deque([WT, BT, BT])
[3,0]: deque([BW])
[3,1]: deque([WT, WC])
[3,2]: deque([WW])
[3,4]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: Stack at [1, 3, 3], Direction.DOWN, Order: [2]
   0    1    2    3    4
0| BT | WW | BC | BW | BT |
1| WW | BW | BT | WT | BW |
2| BW | BW | BW | WW | BT |
3| BW | WC | WW |    | WW |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BT])
[1,3]: deque([WT, WT])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, WW])
[2,4]: deque([WT, BT, BT])
[3,0]: deque([BW])
[3,1]: deque([WT, WC])
[3,2]: deque([WW])
[3,4]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: Stack at [1, 2, 0], Direction.RIGHT, Order: [1]
   0    1    2    3    4
0| BT | WW | BC | BW | BT |
1| WW | BW |    | BT | BW |
2| BW | BW | BW | WW | BT |
3| BW | WC | WW |    | WW |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,3]: deque([WT, WT, BT])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, WW])
[2,4]: deque([WT, BT, BT])
[3,0]: deque([BW])
[3,1]: deque([WT, WC])
[3,2]: deque([WW])
[3,4]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: Stack at [3, 4, 0], Direction.UP, Order: [1]
   0    1    2    3    4
0| BT | WW | BC | BW | BT |
1| WW | BW |    | BT | BW |
2| BW | BW | BW | WW | WW |
3| BW | WC | WW |    |    |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,3]: deque([WT, WT, BT])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT, WC])
[3,2]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: BW (1, 2, 0)
   0    1    2    3    4
0| BT | WW | BC | BW | BT |
1| WW | BW | BW | BT | BW |
2| BW | BW | BW | WW | WW |
3| BW | WC | WW |    |    |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW])
[1,3]: deque([WT, WT, BT])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT, WC])
[3,2]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: Stack at [2, 3, 3], Direction.UP, Order: [1]
   0    1    2    3    4
0| BT | WW | BC | BW | BT |
1| WW | BW | BW | WW | BW |
2| BW | BW | BW | BT | WW |
3| BW | WC | WW |    |    |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW])
[1,3]: deque([WT, WT, BT, WW])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT, WC])
[3,2]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: Stack at [0, 2, 1], Direction.RIGHT, Order: [1]
   0    1    2    3    4
0| BT | WW | WW | BC | BT |
1| WW | BW | BW | WW | BW |
2| BW | BW | BW | BT | WW |
3| BW | WC | WW |    |    |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW])
[0,3]: deque([WT, BW, BC])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW])
[1,3]: deque([WT, WT, BT, WW])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT, WC])
[3,2]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: Stack at [1, 3, 3], Direction.DOWN, Order: [2]
   0    1    2    3    4
0| BT | WW | WW | BC | BT |
1| WW | BW | BW | WT | BW |
2| BW | BW | BW | WW | WW |
3| BW | WC | WW |    |    |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW])
[0,3]: deque([WT, BW, BC])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW])
[1,3]: deque([WT, WT])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT, WC])
[3,2]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: Stack at [0, 3, 2], Direction.DOWN, Order: [1]
   0    1    2    3    4
0| BT | WW | WW | BW | BT |
1| WW | BW | BW | BC | BW |
2| BW | BW | BW | WW | WW |
3| BW | WC | WW |    |    |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW])
[0,3]: deque([WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW])
[1,3]: deque([WT, WT, BC])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT, WC])
[3,2]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: Stack at [3, 1, 1], Direction.RIGHT, Order: [1]
   0    1    2    3    4
0| BT | WW | WW | BW | BT |
1| WW | BW | BW | BC | BW |
2| BW | BW | BW | WW | WW |
3| BW | WT | WC |    |    |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW])
[0,3]: deque([WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW])
[1,3]: deque([WT, WT, BC])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT])
[3,2]: deque([WW, WC])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: Stack at [1, 3, 2], Direction.LEFT, Order: [1]
   0    1    2    3    4
0| BT | WW | WW | BW | BT |
1| WW | BW | BC | WT | BW |
2| BW | BW | BW | WW | WW |
3| BW | WT | WC |    |    |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW])
[0,3]: deque([WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW, BC])
[1,3]: deque([WT, WT])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT])
[3,2]: deque([WW, WC])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: Stack at [3, 2, 1], Direction.RIGHT, Order: [2]
   0    1    2    3    4
0| BT | WW | WW | BW | BT |
1| WW | BW | BC | WT | BW |
2| BW | BW | BW | WW | WW |
3| BW | WT |    | WC |    |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW])
[0,3]: deque([WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW, BC])
[1,3]: deque([WT, WT])
[1,4]: deque([BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT])
[3,3]: deque([WW, WC])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: Stack at [1, 4, 0], Direction.UP, Order: [1]
   0    1    2    3    4
0| BT | WW | WW | BW | BW |
1| WW | BW | BC | WT |    |
2| BW | BW | BW | WW | WW |
3| BW | WT |    | WC |    |
4| WW | WW | WT | WW | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW])
[0,3]: deque([WT, BW])
[0,4]: deque([BT, BW])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW, BC])
[1,3]: deque([WT, WT])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT])
[3,3]: deque([WW, WC])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WW])
[4,4]: deque([BW])

Simulating: Stack at [4, 3, 0], Direction.LEFT, Order: [1]
   0    1    2    3    4
0| BT | WW | WW | BW | BW |
1| WW | BW | BC | WT |    |
2| BW | BW | BW | WW | WW |
3| BW | WT |    | WC |    |
4| WW | WW | WW |    | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW])
[0,3]: deque([WT, BW])
[0,4]: deque([BT, BW])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW, BC])
[1,3]: deque([WT, WT])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT])
[3,3]: deque([WW, WC])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT, WW])
[4,4]: deque([BW])

Simulating: Stack at [0, 4, 1], Direction.DOWN, Order: [2]
   0    1    2    3    4
0| BT | WW | WW | BW |    |
1| WW | BW | BC | WT | BW |
2| BW | BW | BW | WW | WW |
3| BW | WT |    | WC |    |
4| WW | WW | WW |    | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW])
[0,3]: deque([WT, BW])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW, BC])
[1,3]: deque([WT, WT])
[1,4]: deque([BT, BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT])
[3,3]: deque([WW, WC])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT, WW])
[4,4]: deque([BW])

Simulating: Stack at [3, 3, 1], Direction.DOWN, Order: [1]
   0    1    2    3    4
0| BT | WW | WW | BW |    |
1| WW | BW | BC | WT | BW |
2| BW | BW | BW | WW | WW |
3| BW | WT |    | WW |    |
4| WW | WW | WW | WC | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW])
[0,3]: deque([WT, BW])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW, BC])
[1,3]: deque([WT, WT])
[1,4]: deque([BT, BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT])
[3,3]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT, WW])
[4,3]: deque([WC])
[4,4]: deque([BW])

Simulating: Stack at [0, 3, 1], Direction.DOWN, Order: [1]
   0    1    2    3    4
0| BT | WW | WW | WT |    |
1| WW | BW | BC | BW | BW |
2| BW | BW | BW | WW | WW |
3| BW | WT |    | WW |    |
4| WW | WW | WW | WC | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW])
[0,3]: deque([WT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW, BC])
[1,3]: deque([WT, WT, BW])
[1,4]: deque([BT, BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT])
[3,3]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT, WW])
[4,3]: deque([WC])
[4,4]: deque([BW])

Simulating: Stack at [3, 1, 0], Direction.RIGHT, Order: [1]
   0    1    2    3    4
0| BT | WW | WW | WT |    |
1| WW | BW | BC | BW | BW |
2| BW | BW | BW | WW | WW |
3| BW |    | WT | WW |    |
4| WW | WW | WW | WC | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW])
[0,3]: deque([WT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW, BC])
[1,3]: deque([WT, WT, BW])
[1,4]: deque([BT, BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,2]: deque([WT])
[3,3]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT, WW])
[4,3]: deque([WC])
[4,4]: deque([BW])

Simulating: Stack at [1, 2, 1], Direction.UP, Order: [1]
   0    1    2    3    4
0| BT | WW | BC | WT |    |
1| WW | BW | BW | BW | BW |
2| BW | BW | BW | WW | WW |
3| BW |    | WT | WW |    |
4| WW | WW | WW | WC | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW])
[1,3]: deque([WT, WT, BW])
[1,4]: deque([BT, BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,2]: deque([WT])
[3,3]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT, WW])
[4,3]: deque([WC])
[4,4]: deque([BW])

Simulating: Stack at [3, 3, 0], Direction.RIGHT, Order: [1]
   0    1    2    3    4
0| BT | WW | BC | WT |    |
1| WW | BW | BW | BW | BW |
2| BW | BW | BW | WW | WW |
3| BW |    | WT |    | WW |
4| WW | WW | WW | WC | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW])
[1,3]: deque([WT, WT, BW])
[1,4]: deque([BT, BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,2]: deque([WT])
[3,4]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT, WW])
[4,3]: deque([WC])
[4,4]: deque([BW])

Simulating: BT (0, 4, 0)
   0    1    2    3    4
0| BT | WW | BC | WT | BT |
1| WW | BW | BW | BW | BW |
2| BW | BW | BW | WW | WW |
3| BW |    | WT |    | WW |
4| WW | WW | WW | WC | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW])
[1,3]: deque([WT, WT, BW])
[1,4]: deque([BT, BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,2]: deque([WT])
[3,4]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT, WW])
[4,3]: deque([WC])
[4,4]: deque([BW])

Simulating: Stack at [3, 2, 0], Direction.LEFT, Order: [1]
   0    1    2    3    4
0| BT | WW | BC | WT | BT |
1| WW | BW | BW | BW | BW |
2| BW | BW | BW | WW | WW |
3| BW | WT |    |    | WW |
4| WW | WW | WW | WC | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW])
[1,3]: deque([WT, WT, BW])
[1,4]: deque([BT, BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT])
[3,4]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT, WW])
[4,3]: deque([WC])
[4,4]: deque([BW])

Simulating: Stack at [1, 3, 2], Direction.UP, Order: [2]
   0    1    2    3    4
0| BT | WW | BC | BW | BT |
1| WW | BW | BW | WT | BW |
2| BW | BW | BW | WW | WW |
3| BW | WT |    |    | WW |
4| WW | WW | WW | WC | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT, WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW])
[1,3]: deque([WT])
[1,4]: deque([BT, BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT, WW])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT])
[3,4]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT, WW])
[4,3]: deque([WC])
[4,4]: deque([BW])

Simulating: Stack at [2, 3, 4], Direction.UP, Order: [1]
   0    1    2    3    4
0| BT | WW | BC | BW | BT |
1| WW | BW | BW | WW | BW |
2| BW | BW | BW | BT | WW |
3| BW | WT |    |    | WW |
4| WW | WW | WW | WC | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT, WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW])
[1,3]: deque([WT, WW])
[1,4]: deque([BT, BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT, BT, BT])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT])
[3,4]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT, WW])
[4,3]: deque([WC])
[4,4]: deque([BW])

Simulating: Stack at [2, 3, 3], Direction.DOWN, Order: [2]
   0    1    2    3    4
0| BT | WW | BC | BW | BT |
1| WW | BW | BW | WW | BW |
2| BW | BW | BW | WT | WW |
3| BW | WT |    | BT | WW |
4| WW | WW | WW | WC | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT, WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW])
[1,3]: deque([WT, WW])
[1,4]: deque([BT, BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT])
[3,3]: deque([BT, BT])
[3,4]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT, WW])
[4,3]: deque([WC])
[4,4]: deque([BW])

Simulating: Stack at [4, 2, 1], Direction.UP, Order: [1]
   0    1    2    3    4
0| BT | WW | BC | BW | BT |
1| WW | BW | BW | WW | BW |
2| BW | BW | BW | WT | WW |
3| BW | WT | WW | BT | WW |
4| WW | WW | WT | WC | BW |

[0,0]: deque([WT, BT])
[0,1]: deque([WW])
[0,2]: deque([WW, BC])
[0,3]: deque([WT, WT, BW])
[0,4]: deque([BT])
[1,0]: deque([WW])
[1,1]: deque([BW])
[1,2]: deque([BW])
[1,3]: deque([WT, WW])
[1,4]: deque([BT, BW])
[2,0]: deque([WT, BW])
[2,1]: deque([BW])
[2,2]: deque([BW])
[2,3]: deque([BT, WT])
[2,4]: deque([WT, BT, BT, WW])
[3,0]: deque([BW])
[3,1]: deque([WT])
[3,2]: deque([WW])
[3,3]: deque([BT, BT])
[3,4]: deque([WW])
[4,0]: deque([WT, WT, BT, WW])
[4,1]: deque([WT, WW])
[4,2]: deque([WT])
[4,3]: deque([WC])
[4,4]: deque([BW])

   0    1    2    3    4
0|    | BT | BW |    | WW |
1|    |    |    |    | BT |
2| BW |    | BW |    |    |
3|    | BW | WW |    | WW |
4| WW | BT | WC |    | BC |

[0,1]: deque([BT])
[0,2]: deque([WT, BW])
[0,4]: deque([WW])
[1,4]: deque([BT])
[2,0]: deque([BW])
[2,2]: deque([BW])
[3,1]: deque([BW])
[3,2]: deque([WT, WT, WW])
[3,4]: deque([WW])
[4,0]: deque([WT, WW])
[4,1]: deque([WT, BT])
[4,2]: deque([WC])
[4,4]: deque([BW, BC])

Expanding on Stack at [4, 3, 0], Direction.RIGHT, Order: [1]
Traceback (most recent call last):
  File "c:\Users\jfrie\Tak_Monte_Carlo_Tree_Search_AI\MCTS.py", line 169, in <module>
    main()
  File "c:\Users\jfrie\Tak_Monte_Carlo_Tree_Search_AI\MCTS.py", line 153, in main
    white_next = white_root.best_action()
  File "c:\Users\jfrie\Tak_Monte_Carlo_Tree_Search_AI\MCTS.py", line 120, in best_action
    v = self._tree_policy(board)
  File "c:\Users\jfrie\Tak_Monte_Carlo_Tree_Search_AI\MCTS.py", line 106, in _tree_policy
    return current_node.expand(board)